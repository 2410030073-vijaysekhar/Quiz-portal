rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public read-only quiz metadata
    match /subjects/{subjectId} {
      allow read: if true;
      // Only teachers can write subjects
      allow write: if isTeacher();
    }

    // Quizzes and nested questions/options
    match /quizzes/{quizId} {
      allow read: if true; // students need to read quiz metadata
      allow write: if isTeacher();

      match /questions/{questionId} {
        allow read: if true;
        allow write: if isTeacher();

        match /options/{optionId} {
          allow read: if true;
          allow write: if isTeacher();
        }
      }
    }

    // Users collection keyed by auth uid
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isTeacher());
      // Prevent role escalation: a user can write their own doc but cannot set role to 'teacher'
      // unless they were already a teacher. Teachers can write any user.
      allow write: if request.auth != null && (
        (
          request.auth.uid == userId &&
          // new role must not be 'teacher' unless it was already 'teacher'
          (request.resource.data.role != 'teacher' || (resource.data.role == 'teacher'))
        ) || isTeacher()
      );
    }

    // Attempts: users can create/read/update only their own attempt docs
    match /attempts/{attemptId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow read/update if this attempt belongs to the current user, or teacher for analytics
      allow read, update: if request.auth != null && (resource.data.userId == request.auth.uid || isTeacher());

      match /answers/{answerId} {
        allow read: if request.auth != null && (get(/databases/$(database)/documents/attempts/$(attemptId)).data.userId == request.auth.uid || isTeacher());
        allow write: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/attempts/$(attemptId)).data.userId;
      }
    }

    function isTeacher() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
  }
}
